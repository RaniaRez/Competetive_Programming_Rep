class Solution:
    def hIndex(self, citations: List[int]) -> int:
        n=len(citations)
        l,r=0, n - 1

        while l <= r:
            mid = (l + r) //2
            if citations[mid] == n - mid: 
                return citations[mid]
            elif citations[mid] < n - mid:
                l = mid + 1
            else:
                r = mid - 1
        
        return n - l 
        '''
        the case where the optimal h index isn't present in the array: [1, 5, 6, 7, 8] in this case, 
        our algorithm will end up having the mid and r pointers at citations[0]=1 while our l pointer l=1
        and obviously in this case the optimal h-index must be 4 which is n-l'''

            

            
